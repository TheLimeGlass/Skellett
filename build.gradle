import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'maven-publish'
	id 'eclipse'
	id 'java'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

configurations {
    testImplementation.extendsFrom testShadow
}

repositories {
	mavenCentral()

	// Spigot
	maven {
		url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
	}

	// Citizens
	maven {
		url "https://repo.citizensnpcs.co/"
	}

	// Bungeecord
	maven {
		url "https://oss.sonatype.org/content/repositories/snapshots/"
	}

    // Paper
    maven {
        url 'https://repo.papermc.io/repository/maven-public/'
    }

	// Skript
	maven {
		url 'https://repo.skriptlang.org/releases'
	}

}

dependencies {

	//Nullable annotation
	implementation (group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '2.2.800')

	// Spigot
	//implementation (group: 'io.papermc.paper', name: 'paper-api', version: '1.20.4-R0.1-SNAPSHOT')
	implementation (group: 'org.spigotmc', name: 'spigot-api', version: '1.20.6-R0.1-SNAPSHOT')

	// Citizens
	implementation (group: 'net.citizensnpcs', name: 'citizensapi', version: '2.0.35-SNAPSHOT')

	implementation (group: 'com.github.SkriptLang', name: 'Skript', version: '2.9.0-pre1') {
		transitive = false
	}

    // Skript has this
    implementation group: 'net.kyori', name: 'adventure-text-serializer-bungeecord', version: '4.3.2'
    //shadow group: 'net.kyori', name: 'adventure-platform-bukkit', version: '4.3.2'

	// JSON.org
	shadow (group: 'org.json', name: 'json', version: '20230618')

	// Due to Skript for the Testing system
	testShadow (group: 'commons-lang', name: 'commons-lang', version: '2.6')

	implementation fileTree(dir: 'libraries', include: '*.jar')

}

task addonTestJar(type: ShadowJar) {
	dependsOn(shadowJar)
	archiveFileName = 'Skellett-TestJar-' + version + '.jar'
	from sourceSets.test.output, sourceSets.main.output, project.configurations.testShadow
}

tasks.register('setupAddonTest') {
	dependsOn addonTestJar
	doLast {
		copy {
			from 'build/libs/Skellett-TestJar-' + version + '.jar'
			into 'src/test/resources/runner_data/'
			rename('Skellett-TestJar-' + version + '.jar', 'Skellett.jar')
		}
	}
}

// Create a test task with given name, environments dir/file, dev mode and java version.
void createTestTask(String name, String environments, boolean devMode, int javaVersion) {
	tasks.register(name, JavaExec) {
		dependsOn setupAddonTest, shadowJar
		javaLauncher = javaToolchains.launcherFor {
			languageVersion = JavaLanguageVersion.of(javaVersion)
		}
		if (devMode) {
			standardInput = System.in
		}
		group = 'execution'
		classpath = files([
			'src/test/resources/runner_data/Skellett.jar',
			project.configurations.runtimeClasspath.find { it.name.startsWith('gson') },
			sourceSets.main.runtimeClasspath
		])
		main = 'ch.njol.skript.test.platform.PlatformMain'
		args = [
			'build/test_runners',
			'src/test/resources/tests',
			'src/test/resources/runner_data',
			environments,
			devMode,
			false,
			false,
			true,
			"null",
			300000
		]
	}
}

def latestEnv = 'java17/paper-1.20.4.json'
def latestJava = 17
def oldestJava = 8

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs += ["-source", "" + oldestJava, "-target", "" + oldestJava]
}

// Register different Skript testing tasks
createTestTask('quickTest', 'src/test/resources/environments/' + latestEnv, false, latestJava)
createTestTask('addonTestJava17', 'src/test/resources/environments/java17', false, latestJava)
createTestTask('addonTestJava8', 'src/test/resources/environments/java8', false, oldestJava)
createTestTask('addonTestDev', 'src/test/resources/environments/' + (project.property('testEnv') == null
	? latestEnv : project.property('testEnv') + '.json'), true, Integer.parseInt(project.property('testEnvJavaVersion') == null
	? latestJava : project.property('testEnvJavaVersion')))
tasks.register('addonTest') {dependsOn addonTestJava8, addonTestJava17}

processResources {
	filter ReplaceTokens, tokens: ["version": project.property("version")]
	from ("lang/") {
		include '*.lang'
		into 'lang/'
	}
}

shadowJar {
	configurations = [project.configurations.shadow]
	archiveVersion = version
	minimize()
}
